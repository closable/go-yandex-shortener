// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: internal/services/proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Shortenes_GetURLs_FullMethodName      = "/goyandexshortener.Shortenes/GetURLs"
	Shortenes_GetShortener_FullMethodName = "/goyandexshortener.Shortenes/GetShortener"
	Shortenes_Ping_FullMethodName         = "/goyandexshortener.Shortenes/Ping"
	Shortenes_GetStats_FullMethodName     = "/goyandexshortener.Shortenes/GetStats"
)

// ShortenesClient is the client API for Shortenes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenesClient interface {
	// rpc Length(CountURLsRequest) returns (CountURLsResponse);
	GetURLs(ctx context.Context, in *GetURLsRequest, opts ...grpc.CallOption) (*GetURLsResponse, error)
	GetShortener(ctx context.Context, in *GetShortenerRequest, opts ...grpc.CallOption) (*GetShortenerResponse, error)
	Ping(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*GetPingResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shortenesClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenesClient(cc grpc.ClientConnInterface) ShortenesClient {
	return &shortenesClient{cc}
}

func (c *shortenesClient) GetURLs(ctx context.Context, in *GetURLsRequest, opts ...grpc.CallOption) (*GetURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetURLsResponse)
	err := c.cc.Invoke(ctx, Shortenes_GetURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenesClient) GetShortener(ctx context.Context, in *GetShortenerRequest, opts ...grpc.CallOption) (*GetShortenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShortenerResponse)
	err := c.cc.Invoke(ctx, Shortenes_GetShortener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenesClient) Ping(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*GetPingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPingResponse)
	err := c.cc.Invoke(ctx, Shortenes_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenesClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, Shortenes_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenesServer is the server API for Shortenes service.
// All implementations must embed UnimplementedShortenesServer
// for forward compatibility
type ShortenesServer interface {
	// rpc Length(CountURLsRequest) returns (CountURLsResponse);
	GetURLs(context.Context, *GetURLsRequest) (*GetURLsResponse, error)
	GetShortener(context.Context, *GetShortenerRequest) (*GetShortenerResponse, error)
	Ping(context.Context, *GetPingRequest) (*GetPingResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedShortenesServer()
}

// UnimplementedShortenesServer must be embedded to have forward compatible implementations.
type UnimplementedShortenesServer struct {
}

func (UnimplementedShortenesServer) GetURLs(context.Context, *GetURLsRequest) (*GetURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLs not implemented")
}
func (UnimplementedShortenesServer) GetShortener(context.Context, *GetShortenerRequest) (*GetShortenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortener not implemented")
}
func (UnimplementedShortenesServer) Ping(context.Context, *GetPingRequest) (*GetPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenesServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenesServer) mustEmbedUnimplementedShortenesServer() {}

// UnsafeShortenesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenesServer will
// result in compilation errors.
type UnsafeShortenesServer interface {
	mustEmbedUnimplementedShortenesServer()
}

func RegisterShortenesServer(s grpc.ServiceRegistrar, srv ShortenesServer) {
	s.RegisterService(&Shortenes_ServiceDesc, srv)
}

func _Shortenes_GetURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenesServer).GetURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortenes_GetURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenesServer).GetURLs(ctx, req.(*GetURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortenes_GetShortener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenesServer).GetShortener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortenes_GetShortener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenesServer).GetShortener(ctx, req.(*GetShortenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortenes_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenesServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortenes_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenesServer).Ping(ctx, req.(*GetPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortenes_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenesServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortenes_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenesServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortenes_ServiceDesc is the grpc.ServiceDesc for Shortenes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortenes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goyandexshortener.Shortenes",
	HandlerType: (*ShortenesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetURLs",
			Handler:    _Shortenes_GetURLs_Handler,
		},
		{
			MethodName: "GetShortener",
			Handler:    _Shortenes_GetShortener_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Shortenes_Ping_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shortenes_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/services/proto/shortener.proto",
}
